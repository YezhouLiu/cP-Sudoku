////////////////cP Sudoku//////////////////
//Yezhou Liu

//#define M 4; //problem size 
//var a = [1,2,3,4];	//term a

#define M 9; //problem size 
var a = [1,2,3,4,5,6,7,8,9];	//term a

var c[M];	//index: L-1, value: V
var l = 1; //term l
var state = 1;
var promoter_valid = true;

R1() = rule1{
	if(state == 1 && l == M + 1){
		l = 1;
		state = 2;
	}
} -> if (state == 2){Skip} else {R2()};

R2() = []i:{0..(M-1)}@ rule2{
	if (state == 1){
		promoter_valid = true;
		var j = 0;
		while (j < M){
			if (c[j] == a[i]){promoter_valid = false;}
		j++;
		}
		if(promoter_valid){
		c[l-1] = a[i];
		}
		state = 1;
	}
} -> if (promoter_valid){R3()} else{Skip};

R3() = rule3{
	if (state == 1){
		state = 1;
	}
} -> R4();

R4() = rule4{
	if(state == 1){
		l = l + 1;
		state = 1;
	}
} -> R1();

#assert R1() nonterminating;
#assert R1() deadlockfree;
#assert R1() divergencefree;
#assert R1() deterministic;